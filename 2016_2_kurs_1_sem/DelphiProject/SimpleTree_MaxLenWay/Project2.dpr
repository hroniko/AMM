program Project2;

{$APPTYPE CONSOLE}

uses
  EsConsole in 'EsConsole.pas',
  MySimpleTree in 'MySimpleTree.pas';

// Модуль реализации простейшего дерева и функций работы с ним

var myFile: Text; // Переменная типа Text для асоцииации с текстовым файлом
    tmp: Integer;

    uk, tmpNode: tree_ptr;
    sum, count, srednee: Integer;

begin
  // Выводим информацию по задаче:
  Writeln('| ------------------------------------------------------- |');
  Writeln('| Бедарев А.А., ПММ, 2 курс, 1 семестр. Задание 3, (№ 20) |'); 
  Writeln('| Среди всех путей дерева, соединяющих вершины на разном  |');
  Writeln('| уровне, выбрать путь максимальной длины, для которого   |');
  Writeln('| сумма ключей конечных вершин минимальна.                |');
  Writeln('| Среднюю вершину этого пути сделать корневой вершиной.   |'); 
  Writeln('| ------------------------------------------------------- |');
  Writeln;

  // 1) --------------- Чтение из файла и формироание дерева ------------------
  assign(myFile, 'in3.txt'); // Связываем файл с переменной myFile
  reset(myFile); // Открываем файл на чтение
  // Читаем каждый элемент файла сразу в дерево:
  tmp:= 0;
  while not Eof(myFile) do // Запускаем цикл чтения чисел из файла
    begin
      readln(myFile, tmp); // Считываем число во временную перемнную
      uk:= InsertKey(uk, tmp);  // и добавляем ее в дерево
    end;
  close(myFile); // Закрываем файл, освобождаем ресурсы
  // 1) -----------------------------------------------------------------------

  // 2) --------------- Вывод исходного дерева в консоль ----------------------
  Write('   Исходное дерево (прямой левый обход): ');
  FrontOrderLeft(uk); // Выводим на консоль прямым левым обходом наше дерево
  Writeln;

  WriteLn('   Структура: ');
  Writeln;
  PrintLeftTree(uk); // Печать пространственного дерева
  // 2) -----------------------------------------------------------------------

  // 3) ------------------ Выполнение требований задания ----------------------
  //WriteLn('   Сумма конечных для корневого: ', SumKey_MaxLenWay(uk));
  tmpNode:= FindNodeBetween_MaxLenWay(uk);
  WriteLn('   Узел, через который проходит искомый путь: ', tmpNode^.key);
  WriteLn('   Сумма конечных элементов для данного узла: ', SumKey_MaxLenWay(tmpNode) );
  write('   Путь максимальной длины: '); PrintMaxLenWay(tmpNode);
  Writeln('   Длина пути: ', MaxLenWay(tmpNode) );
  Writeln;

  // 4) Перестраиваем дерево:
  RebuildTree(uk, tmpNode);

  // 5) --------------- Вывод перестроенного дерева в консоль ----------------------
  Write('   Перестроенное дерево (прямой левый обход): ');
  FrontOrderLeft(tmpNode); // Выводим на консоль прямым левым обходом наше новое дерево
  Writeln;

  WriteLn('   Структура: ');
  Writeln;
  PrintLeftTree(tmpNode); // Печать пространственного дерева

 {
  // Ищем и удаляем ПРАВЫМ удалением среднюю по значению
  uk:= FindMiddleAndRightRemove(uk);
  Writeln;
  // 3) -----------------------------------------------------------------------

  // 4) ------------- Вывод исправленного дерева в консоль --------------------
  Write('   Новое дерево (прямой левый обход): ');
  FrontOrderLeft(uk); // Выводим на консоль прямым левым обходом наше дерево
  Writeln;

  WriteLn('   Структура: ');
  Writeln;
  PrintLeftTree(uk); // Печать пространственного дерева
  // 4) -----------------------------------------------------------------------
  }
  Readln;  // Ожидание нажатия клавиши и выход из программы
end.
